---
apiVersion: tekton.dev/v1beta1
kind: ClusterTask
metadata:
  annotations:
    task.kubevirt.io/associatedServiceAccount: cleanup-vm-task
    vmNamespace.params.task.kubevirt.io/type: namespace
    secretName.params.task.kubevirt.io/type: execute-in-vm-secret
    script.params.task.kubevirt.io/type: script
    delete.params.task.kubevirt.io/type: boolean
    stop.params.task.kubevirt.io/type: boolean
    timeout.params.task.kubevirt.io/type: duration
  labels:
    task.kubevirt.io/type: cleanup-vm
    task.kubevirt.io/category: execute-in-vm
  name: cleanup-vm
spec:
  params:
    - description: Name of a VM to execute the action in.
      name: vmName
      type: string
    - description: Namespace of a VM to execute the action in. (defaults to active namespace)
      name: vmNamespace
      type: string
      default: ""
    - description: Stops the VM after executing the commands when set to true.
      name: stop
      type: string
      default: "true"
    - description: Deletes the VM after executing the commands when set to true.
      name: delete
      type: string
      default: "false"
    - description: Timeout for the command/script (includes potential VM start). The VM will be stopped or deleted accordingly once the timout expires. Should be in a 3h2m1s format.
      name: timeout
      type: string
      default: "30m"
    - description: Secret to use when connecting to a VM.
      name: secretName
      type: string
      default: "__empty__"
    - description: Command to execute in a VM.
      name: command
      type: array
      default: []
    - description: Arguments of a command.
      name: args
      type: array
      default: []
    - description: Script to execute in a VM.
      name: script
      type: string
      default: ""
  steps:
    - name: execute-in-vm
      image: quay.io/kubevirt/tekton-task-execute-in-vm:v0.0.7
      command:
        - entrypoint
      args:
        - '--stop'
        - $(params.stop)
        - '--delete'
        - $(params.delete)
        - '--timeout'
        - $(params.timeout)
        - '--'
        - $(params.command)
        - $(params.args)
      env:
        - name: VM_NAME
          value: $(params.vmName)
        - name: VM_NAMESPACE
          value: $(params.vmNamespace)
        - name: EXECUTE_SCRIPT
          value: $(params.script)
        - name: CONNECTION_SECRET_NAME
          value: $(params.secretName)
      volumeMounts:
        - mountPath: /data/connectionsecret/
          name: connectionsecret
          readOnly: true
  volumes:
    - name: connectionsecret
      secret:
        secretName: $(params.secretName)
        optional: true

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: cleanup-vm-task
rules:
  - verbs:
      - get
      - list
      - watch
      - delete
    apiGroups:
      - kubevirt.io
    resources:
      - virtualmachines
      - virtualmachineinstances
  - verbs:
      - update
    apiGroups:
      - subresources.kubevirt.io
    resources:
      - virtualmachines/start
      - virtualmachines/stop
      - virtualmachines/restart

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: cleanup-vm-task

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: cleanup-vm-task
roleRef:
  kind: ClusterRole
  name: cleanup-vm-task
  apiGroup: rbac.authorization.k8s.io
subjects:
  - kind: ServiceAccount
    name: cleanup-vm-task
---
apiVersion: tekton.dev/v1beta1
kind: ClusterTask
metadata:
  annotations:
    task.kubevirt.io/associatedServiceAccount: clone-pvc-task
    sourcePVC.params.task.kubevirt.io/kind: PersistentVolumeClaim
    sourcePVC.params.task.kubevirt.io/apiVersion: cdi.kubevirt.io/v1beta1
    sourcePVCNamespace.params.task.kubevirt.io/type: namespace
    targetPVC.params.task.kubevirt.io/kind: PersistentVolumeClaim
    targetPVC.params.task.kubevirt.io/apiVersion: cdi.kubevirt.io/v1beta1
    targetPVCNamespace.params.task.kubevirt.io/type: namespace
    storageClass.params.task.kubevirt.io/kind: StorageClass
    storageClass.params.task.kubevirt.io/apiVersion: storage.k8s.io/v1
    waitForSuccess.params.task.kubevirt.io/type: boolean
  labels:
    task.kubevirt.io/type: clone-pvc
    task.kubevirt.io/category: create-datavolume
  name: clone-pvc
spec:
  params:
    - name: sourcePVC
      description: Source PersistentVolumeClaim to clone from.
      type: string
    - name: sourcePVCNamespace
      description: Namespace of sourcePVC. (defaults to active namespace)
      default: ""
      type: string
    - name: targetPVC
      description: Target PersistentVolumeClaim to clone to. The name will be generated if not specified. Implemented by CDI DataVolumes.
      default: ""
      type: string
    - name: targetPVCNamespace
      description: Namespace of targetPVC. (defaults to active namespace)
      default: ""
      type: string
    - name: storageClass
      description: StorageClass to use when cloning. (defaults to empty; ie default StorageClass)
      default: ""
      type: string
    - name: waitForSuccess
      description: Set to "true" or "false" if container should wait for Ready condition of a DataVolume.
      default: 'false'
      type: string
  results:
    - name: name
      description: The name of target PVC.
    - name: namespace
      description: The namespace of a target PVC.
  steps:
    - name: clone-pvc
      image: quay.io/kubevirt/tekton-task-create-datavolume:v0.0.1
      command:
        - clone-pvc
        - '--source-pvc-name'
        - $(params.sourcePVC)
        - '--source-pvc-namespace'
        - $(params.sourcePVCNamespace)
        - '--target-pvc-name'
        - $(params.targetPVC)
        - '--target-pvc-namespace'
        - $(params.targetPVCNamespace)
        - '--storage-class'
        - $(params.storageClass)
        - '--wait-for-success'
        - $(params.waitForSuccess)

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: clone-pvc-task
rules:
  - verbs:
      - get
      - list
      - watch
      - create
    apiGroups:
      - cdi.kubevirt.io
    resources:
      - datavolumes

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: clone-pvc-task

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: clone-pvc-task
roleRef:
  kind: ClusterRole
  name: clone-pvc-task
  apiGroup: rbac.authorization.k8s.io
subjects:
  - kind: ServiceAccount
    name: clone-pvc-task
---
apiVersion: tekton.dev/v1beta1
kind: ClusterTask
metadata:
  annotations:
    task.kubevirt.io/associatedServiceAccount: clone-template-task
    sourceTemplate.params.task.kubevirt.io/kind: Template
    sourceTemplate.params.task.kubevirt.io/apiVersion: template.openshift.io/v1
    sourceTemplateNamespace.params.task.kubevirt.io/type: namespace
    targetTemplate.params.task.kubevirt.io/kind: Template
    targetTemplate.params.task.kubevirt.io/apiVersion: template.openshift.io/v1
    targetTemplateNamespace.params.task.kubevirt.io/type: namespace
  labels:
    task.kubevirt.io/type: clone-template
    task.kubevirt.io/category: clone-template
  name: clone-template
spec:
  params:
    - name: sourceTemplate
      description: Source Template to clone from.
      type: string
    - name: sourceTemplateNamespace
      description: Namespace of sourceTemplate. (defaults to active namespace)
      default: ""
      type: string
    - name: targetTemplate
      description: Target Template to clone to. The name will be generated if not specified.
      default: ""
      type: string
    - name: targetTemplateNamespace
      description: Namespace of targetTemplate. (defaults to active namespace)
      default: ""
      type: string
    - name: clonePVCs
      description: Clone all PVCs of the sourceTemplate.
      default: "true"
      type: string
  results:
    - name: name
      description: The name of target Template.
    - name: namespace
      description: The namespace of a target Template.
  steps:
    - name: clone-template
      image: quay.io/kubevirt/tekton-task-clone-template:v0.0.1
      command:
        - clone-template
        - '--source-template-name'
        - $(params.sourceTemplate)
        - '--source-template-namespace'
        - $(params.sourceTemplateNamespace)
        - '--target-template-name'
        - $(params.targetTemplate)
        - '--target-template-namespace'
        - $(params.targetTemplateNamespace)
        - '--clone-pvcs'
        - $(params.clonePVCs)

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: clone-template-task
rules:
  - verbs:
      - get
      - list
      - create
      - watch
    apiGroups:
      - template.openshift.io
    resources:
      - templates

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: clone-template-task

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: clone-template-task
roleRef:
  kind: ClusterRole
  name: clone-template-task
  apiGroup: rbac.authorization.k8s.io
subjects:
  - kind: ServiceAccount
    name: clone-template-task
---
apiVersion: tekton.dev/v1beta1
kind: ClusterTask
metadata:
  annotations:
    task.kubevirt.io/associatedServiceAccount: create-datavolume-from-manifest-task
    manifest.params.task.kubevirt.io/type: resource-yaml
    manifest.params.task.kubevirt.io/kind: DataVolume
    manifest.params.task.kubevirt.io/apiVersion: cdi.kubevirt.io/v1beta1
    waitForSuccess.params.task.kubevirt.io/type: boolean
  labels:
    task.kubevirt.io/type: create-datavolume-from-manifest
    task.kubevirt.io/category: create-datavolume
  name: create-datavolume-from-manifest
spec:
  description: >-
    This task creates a DataVolume with oc client. It can optionally wait until
    CDI imports finishes.
  params:
    - name: manifest
      description: YAML manifest of a DataVolume resource to be created.
      type: string
    - name: waitForSuccess
      description: Set to "true" or "false" if container should wait for Ready condition of a DataVolume.
      default: 'false'
      type: string
  results:
    - name: name
      description: The name of DataVolume that was created.
    - name: namespace
      description: The namespace of DataVolume that was created.
  steps:
    - name: create
      image: quay.io/openshift/origin-cli:4.8
      script: |
        #!/usr/bin/env bash

        set -e

        TMP_DV_YAML_FILENAME="/tmp/datavolume.yaml"
        TMP_DV_RESULTS_FILENAME="/tmp/dv_results"

        echo "$(inputs.params.manifest)" > "$TMP_DV_YAML_FILENAME"

        if ! grep -q "kind: DataVolume$" "$TMP_DV_YAML_FILENAME"; then
            1>&2 echo "manifest does not contain DataVolume kind!"
            exit 1
        fi

        oc create -f "$TMP_DV_YAML_FILENAME" -o  jsonpath='{.metadata.name} {.metadata.namespace}' > "$TMP_DV_RESULTS_FILENAME"

        sed -i 's/ /\n/g' "$TMP_DV_RESULTS_FILENAME"
        readarray -t DV_OUTPUT_ARRAY < "$TMP_DV_RESULTS_FILENAME"

        DV_NAME="${DV_OUTPUT_ARRAY[0]}"
        DV_NAMESPACE="${DV_OUTPUT_ARRAY[1]}"

        echo -n "$DV_NAME" > /tekton/results/name
        echo -n "$DV_NAMESPACE" > /tekton/results/namespace

        echo "Created $DV_NAME Datavolume in $DV_NAMESPACE namespace."

        if [ "$(inputs.params.waitForSuccess)" == true ]; then
            echo "Waiting for Ready condition."
            # TODO: detect failed imports and don't wait until wait timeouts
            oc wait "datavolumes.cdi.kubevirt.io/$DV_NAME" --namespace="$DV_NAMESPACE" --for="condition=Ready" --timeout=720h
        fi

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: create-datavolume-from-manifest-task
rules:
  - verbs:
      - get
      - list
      - watch
      - create
    apiGroups:
      - cdi.kubevirt.io
    resources:
      - datavolumes

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: create-datavolume-from-manifest-task

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: create-datavolume-from-manifest-task
roleRef:
  kind: ClusterRole
  name: create-datavolume-from-manifest-task
  apiGroup: rbac.authorization.k8s.io
subjects:
  - kind: ServiceAccount
    name: create-datavolume-from-manifest-task
---
apiVersion: tekton.dev/v1beta1
kind: ClusterTask
metadata:
  annotations:
    task.kubevirt.io/associatedServiceAccount: create-vm-from-manifest-task
    manifest.params.task.kubevirt.io/type: resource-yaml
    manifest.params.task.kubevirt.io/kind: VirtualMachine
    manifest.params.task.kubevirt.io/apiVersion: kubevirt.io/v1
    namespace.params.task.kubevirt.io/type: namespace
    dataVolumes.params.task.kubevirt.io/kind: DataVolume
    dataVolumes.params.task.kubevirt.io/apiVersion: cdi.kubevirt.io/v1beta1
    ownDataVolumes.params.task.kubevirt.io/kind: DataVolume
    ownDataVolumes.params.task.kubevirt.io/apiVersion: cdi.kubevirt.io/v1beta1
    persistentVolumeClaims.params.task.kubevirt.io/kind: PersistentVolumeClaim
    persistentVolumeClaims.params.task.kubevirt.io/apiVersion: v1
    ownPersistentVolumeClaims.params.task.kubevirt.io/kind: PersistentVolumeClaim
    ownPersistentVolumeClaims.params.task.kubevirt.io/apiVersion: v1
  labels:
    task.kubevirt.io/type: create-vm-from-manifest
    task.kubevirt.io/category: create-vm
  name: create-vm-from-manifest
spec:
  params:
    - name: manifest
      description: YAML manifest of a VirtualMachine resource to be created.
      type: string
    - name: namespace
      description: Namespace where to create the VM. (defaults to manifest namespace or active namespace)
      default: ""
      type: string
    - name: dataVolumes
      description: Add DVs to VM Volumes. Replaces a particular volume if in VOLUME_NAME:DV_NAME format. Eg. ["rootdisk:my-dv", "my-dv2"]
      default: []
      type: array
    - name: ownDataVolumes
      description: Add DVs to VM Volumes and add VM to DV ownerReferences. These DataVolumes will be deleted once the created VM gets deleted. Replaces a particular volume if in VOLUME_NAME:DV_NAME format. Eg. ["rootdisk:my-dv", "my-dv2"]
      default: []
      type: array
    - name: persistentVolumeClaims
      description: Add PVCs to VM Volumes. Replaces a particular volume if in VOLUME_NAME:PVC_NAME format. Eg. ["rootdisk:my-pvc", "my-pvc2"]
      default: []
      type: array
    - name: ownPersistentVolumeClaims
      description: Add PVCs to VM Volumes and add VM to PVC ownerReferences. These PVCs will be deleted once the created VM gets deleted. Replaces a particular volume if in VOLUME_NAME:PVC_NAME format. Eg. ["rootdisk:my-pvc", "my-pvc2"]
      default: []
      type: array
  results:
    - name: name
      description: The name of a VM that was created.
    - name: namespace
      description: The namespace of a VM that was created.
  steps:
    - name: createvm
      image: quay.io/kubevirt/tekton-task-create-vm:v0.0.7
      command:
        - create-vm
      args:
        - "--output=yaml"
        - '--dvs'
        - $(params.dataVolumes)
        - '--own-dvs'
        - $(params.ownDataVolumes)
        - '--pvcs'
        - $(params.persistentVolumeClaims)
        - '--own-pvcs'
        - $(params.ownPersistentVolumeClaims)
      env:
        - name: VM_MANIFEST
          value: $(params.manifest)
        - name: VM_NAMESPACE
          value: $(params.namespace)

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: create-vm-from-manifest-task
rules:
  - verbs:
      - get
      - list
      - watch
      - create
    apiGroups:
      - kubevirt.io
    resources:
      - virtualmachines
      - virtualmachineinstances
  - verbs:
      - '*'
    apiGroups:
      - kubevirt.io
    resources:
      - virtualmachines/finalizers
  - verbs:
      - '*'
    apiGroups:
      - ''
    resources:
      - persistentvolumeclaims
  - verbs:
      - '*'
    apiGroups:
      - cdi.kubevirt.io
    resources:
      - datavolumes

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: create-vm-from-manifest-task

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: create-vm-from-manifest-task
roleRef:
  kind: ClusterRole
  name: create-vm-from-manifest-task
  apiGroup: rbac.authorization.k8s.io
subjects:
  - kind: ServiceAccount
    name: create-vm-from-manifest-task
---
apiVersion: tekton.dev/v1beta1
kind: ClusterTask
metadata:
  annotations:
    task.kubevirt.io/associatedServiceAccount: create-vm-from-template-task
    templateName.params.task.kubevirt.io/type: vm-template-name
    templateName.params.task.kubevirt.io/kind: Template
    templateName.params.task.kubevirt.io/apiVersion: template.openshift.io/v1
    templateNamespace.params.task.kubevirt.io/type: namespace
    templateParams.params.task.kubevirt.io/type: template-params-array
    vmNamespace.params.task.kubevirt.io/type: namespace
    dataVolumes.params.task.kubevirt.io/kind: DataVolume
    dataVolumes.params.task.kubevirt.io/apiVersion: cdi.kubevirt.io/v1beta1
    ownDataVolumes.params.task.kubevirt.io/kind: DataVolume
    ownDataVolumes.params.task.kubevirt.io/apiVersion: cdi.kubevirt.io/v1beta1
    persistentVolumeClaims.params.task.kubevirt.io/kind: PersistentVolumeClaim
    persistentVolumeClaims.params.task.kubevirt.io/apiVersion: v1
    ownPersistentVolumeClaims.params.task.kubevirt.io/kind: PersistentVolumeClaim
    ownPersistentVolumeClaims.params.task.kubevirt.io/apiVersion: v1
  labels:
    task.kubevirt.io/type: create-vm-from-template
    task.kubevirt.io/category: create-vm
  name: create-vm-from-template
spec:
  params:
    - name: templateName
      description: Name of an OKD template to create VM from.
      type: string
    - name: templateNamespace
      description: Namespace of an OKD template to create VM from. (defaults to active namespace)
      default: ""
      type: string
    - name: templateParams
      description: Template params to pass when processing the template manifest. Each param should have KEY:VAL format. Eg ["NAME:my-vm", "DESC:blue"]
      default: []
      type: array
    - name: vmNamespace
      description: Namespace where to create the VM. (defaults to active namespace)
      default: ""
      type: string
    - name: dataVolumes
      description: Add DVs to VM Volumes. Replaces a particular volume if in VOLUME_NAME:DV_NAME format. Eg. ["rootdisk:my-dv", "my-dv2"]
      default: []
      type: array
    - name: ownDataVolumes
      description: Add DVs to VM Volumes and add VM to DV ownerReferences. These DataVolumes will be deleted once the created VM gets deleted. Replaces a particular volume if in VOLUME_NAME:DV_NAME format. Eg. ["rootdisk:my-dv", "my-dv2"]
      default: []
      type: array
    - name: persistentVolumeClaims
      description: Add PVCs to VM Volumes. Replaces a particular volume if in VOLUME_NAME:PVC_NAME format. Eg. ["rootdisk:my-pvc", "my-pvc2"]
      default: []
      type: array
    - name: ownPersistentVolumeClaims
      description: Add PVCs to VM Volumes and add VM to PVC ownerReferences. These PVCs will be deleted once the created VM gets deleted. Replaces a particular volume if in VOLUME_NAME:PVC_NAME format. Eg. ["rootdisk:my-pvc", "my-pvc2"]
      default: []
      type: array
  results:
    - name: name
      description: The name of a VM that was created.
    - name: namespace
      description: The namespace of a VM that was created.
  steps:
    - name: createvm
      image: quay.io/kubevirt/tekton-task-create-vm:v0.0.7
      command:
        - create-vm
      args:
        - "--output=yaml"
        - '--dvs'
        - $(params.dataVolumes)
        - '--own-dvs'
        - $(params.ownDataVolumes)
        - '--pvcs'
        - $(params.persistentVolumeClaims)
        - '--own-pvcs'
        - $(params.ownPersistentVolumeClaims)
        - '--template-params'
        - $(params.templateParams)
      env:
        - name: TEMPLATE_NAME
          value: $(params.templateName)
        - name: TEMPLATE_NAMESPACE
          value: $(params.templateNamespace)
        - name: VM_NAMESPACE
          value: $(params.vmNamespace)

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: create-vm-from-template-task
rules:
  - verbs:
      - get
      - list
      - watch
      - create
    apiGroups:
      - kubevirt.io
    resources:
      - virtualmachines
      - virtualmachineinstances
  - verbs:
      - '*'
    apiGroups:
      - kubevirt.io
    resources:
      - virtualmachines/finalizers
  - verbs:
      - get
      - list
      - watch
    apiGroups:
      - template.openshift.io
    resources:
      - templates
  - verbs:
      - create
    apiGroups:
      - template.openshift.io
    resources:
      - processedtemplates
  - verbs:
      - '*'
    apiGroups:
      - ''
    resources:
      - persistentvolumeclaims
  - verbs:
      - '*'
    apiGroups:
      - cdi.kubevirt.io
    resources:
      - datavolumes

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: create-vm-from-template-task

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: create-vm-from-template-task
roleRef:
  kind: ClusterRole
  name: create-vm-from-template-task
  apiGroup: rbac.authorization.k8s.io
subjects:
  - kind: ServiceAccount
    name: create-vm-from-template-task
---
apiVersion: tekton.dev/v1beta1
kind: ClusterTask
metadata:
  annotations:
    pvc.params.task.kubevirt.io/kind: PersistentVolumeClaim
    pvc.params.task.kubevirt.io/apiVersion: v1
    customizeCommands.params.task.kubevirt.io/type: script
    verbose.params.task.kubevirt.io/type: boolean
  labels:
    task.kubevirt.io/type: disk-virt-customize
    task.kubevirt.io/category: disk-virt-customize
  name: disk-virt-customize
spec:
  params:
    - name: pvc
      description: PersistentVolumeClaim to run the the virt-customize script in. PVC should be in the same namespace as taskrun/pipelinerun.
      type: string
    - name: customizeCommands
      description: virt-customize commands in "--commands-from-file" format.
      type: string
      default: ""
    - name: verbose
      description: Enable verbose mode and tracing of libguestfs API calls.
      type: string
      default: 'false'
    - name: additionalOptions
      description: Additional options to pass to virt-customize.
      type: string
      default: ""
  steps:
    - name: run-virt-customize
      image: quay.io/kubevirt/tekton-task-disk-virt-customize:v0.0.3
      command:
        - entrypoint
      args:
        - '--verbose'
        - $(params.verbose)
      env:
        - name: CUSTOMIZE_COMMANDS
          value: $(params.customizeCommands)
        - name: ADDITIONAL_VIRT_CUSTOMIZE_OPTIONS
          value: $(params.additionalOptions)
        - name: LIBGUESTFS_BACKEND
          value: direct
        - name: LIBGUESTFS_PATH
          value: /mnt/appliance
      securityContext:
        runAsUser: 0
      resources:
        limits:
          devices.kubevirt.io/kvm: '1'
          devices.kubevirt.io/tun: '1'
          devices.kubevirt.io/vhost-net: '1'
        requests:
          devices.kubevirt.io/kvm: '1'
          devices.kubevirt.io/tun: '1'
          devices.kubevirt.io/vhost-net: '1'
      volumeMounts:
        - mountPath: /mnt/appliance/
          name: guestfsappliance
        - mountPath: /mnt/targetpvc/
          name: targetpvc
  volumes:
    - name: guestfsappliance
      emptyDir: {}
    - name: targetpvc
      persistentVolumeClaim:
        claimName: $(params.pvc)
---
apiVersion: tekton.dev/v1beta1
kind: ClusterTask
metadata:
  annotations:
    pvc.params.task.kubevirt.io/kind: PersistentVolumeClaim
    pvc.params.task.kubevirt.io/apiVersion: v1
    sysprepCommands.params.task.kubevirt.io/type: script
    verbose.params.task.kubevirt.io/type: boolean
  labels:
    task.kubevirt.io/type: disk-virt-sysprep
    task.kubevirt.io/category: disk-virt-sysprep
  name: disk-virt-sysprep
spec:
  params:
    - name: pvc
      description: PersistentVolumeClaim to run the the virt-sysprep script in. PVC should be in the same namespace as taskrun/pipelinerun.
      type: string
    - name: sysprepCommands
      description: virt-sysprep commands in "--commands-from-file" format.
      type: string
      default: ""
    - name: verbose
      description: Enable verbose mode and tracing of libguestfs API calls.
      type: string
      default: 'false'
    - name: additionalOptions
      description: Additional options to pass to virt-sysprep.
      type: string
      default: ""
  steps:
    - name: run-virt-sysprep
      image: quay.io/kubevirt/tekton-task-disk-virt-sysprep:v0.0.1
      command:
        - entrypoint
      args:
        - '--verbose'
        - $(params.verbose)
      env:
        - name: SYSPREP_COMMANDS
          value: $(params.sysprepCommands)
        - name: ADDITIONAL_VIRT_SYSPREP_OPTIONS
          value: $(params.additionalOptions)
        - name: LIBGUESTFS_BACKEND
          value: direct
        - name: LIBGUESTFS_PATH
          value: /mnt/appliance
      securityContext:
        runAsUser: 0
      resources:
        limits:
          devices.kubevirt.io/kvm: '1'
          devices.kubevirt.io/tun: '1'
          devices.kubevirt.io/vhost-net: '1'
        requests:
          devices.kubevirt.io/kvm: '1'
          devices.kubevirt.io/tun: '1'
          devices.kubevirt.io/vhost-net: '1'
      volumeMounts:
        - mountPath: /mnt/appliance/
          name: guestfsappliance
        - mountPath: /mnt/targetpvc/
          name: targetpvc
  volumes:
    - name: guestfsappliance
      emptyDir: {}
    - name: targetpvc
      persistentVolumeClaim:
        claimName: $(params.pvc)
---
apiVersion: tekton.dev/v1beta1
kind: ClusterTask
metadata:
  annotations:
    task.kubevirt.io/associatedServiceAccount: execute-in-vm-task
    vmNamespace.params.task.kubevirt.io/type: namespace
    secretName.params.task.kubevirt.io/type: execute-in-vm-secret
    script.params.task.kubevirt.io/type: script
  labels:
    task.kubevirt.io/type: execute-in-vm
    task.kubevirt.io/category: execute-in-vm
  name: execute-in-vm
spec:
  params:
    - description: Name of a VM to execute the action in.
      name: vmName
      type: string
    - description: Namespace of a VM to execute the action in. (defaults to active namespace)
      name: vmNamespace
      type: string
      default: ""
    - description: Secret to use when connecting to a VM.
      name: secretName
      type: string
      default: "__empty__"
    - description: Command to execute in a VM.
      name: command
      type: array
      default: []
    - description: Arguments of a command.
      name: args
      type: array
      default: []
    - description: Script to execute in a VM.
      name: script
      type: string
      default: ""
  steps:
    - name: execute-in-vm
      image: quay.io/kubevirt/tekton-task-execute-in-vm:v0.0.7
      command:
        - entrypoint
      args:
        - '--'
        - $(params.command)
        - $(params.args)
      env:
        - name: VM_NAME
          value: $(params.vmName)
        - name: VM_NAMESPACE
          value: $(params.vmNamespace)
        - name: EXECUTE_SCRIPT
          value: $(params.script)
        - name: CONNECTION_SECRET_NAME
          value: $(params.secretName)
      volumeMounts:
        - mountPath: /data/connectionsecret/
          name: connectionsecret
          readOnly: true
  volumes:
    - name: connectionsecret
      secret:
        secretName: $(params.secretName)
        optional: true

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: execute-in-vm-task
rules:
  - verbs:
      - get
      - list
      - watch
    apiGroups:
      - kubevirt.io
    resources:
      - virtualmachines
      - virtualmachineinstances
  - verbs:
      - update
    apiGroups:
      - subresources.kubevirt.io
    resources:
      - virtualmachines/start
      - virtualmachines/stop
      - virtualmachines/restart

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: execute-in-vm-task

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: execute-in-vm-task
roleRef:
  kind: ClusterRole
  name: execute-in-vm-task
  apiGroup: rbac.authorization.k8s.io
subjects:
  - kind: ServiceAccount
    name: execute-in-vm-task
---
apiVersion: tekton.dev/v1beta1
kind: ClusterTask
metadata:
  annotations:
    task.kubevirt.io/associatedServiceAccount: generate-ssh-keys-task
    publicKeySecretName.params.task.kubevirt.io/kind: Secret
    publicKeySecretName.params.task.kubevirt.io/apiVersion: v1
    publicKeySecretNamespace.params.task.kubevirt.io/type: namespace
    privateKeySecretName.params.task.kubevirt.io/kind: Secret
    privateKeySecretName.params.task.kubevirt.io/apiVersion: v1
    privateKeySecretNamespace.params.task.kubevirt.io/type: namespace
    privateKeyConnectionOptions.params.task.kubevirt.io/type: private-key-options-array
  labels:
    task.kubevirt.io/type: generate-ssh-keys
    task.kubevirt.io/category: generate-ssh-keys
  name: generate-ssh-keys
spec:
  params:
    - name: publicKeySecretName
      description: Name of a new or existing secret to append the generated public key to. The name will be generated and new secret created if not specified.
      default: ""
      type: string
    - name: publicKeySecretNamespace
      description: Namespace of publicKeySecretName. (defaults to active namespace)
      default: ""
      type: string
    - name: privateKeySecretName
      description: Name of a new secret to add the generated private key to. The name will be generated if not specified. The secret uses format of execute-in-vm task.
      default: ""
      type: string
    - name: privateKeySecretNamespace
      description: Namespace of privateKeySecretName. (defaults to active namespace)
      default: ""
      type: string
    - name: privateKeyConnectionOptions
      description: Additional options to use in SSH client. Please see execute-in-vm task SSH section for more details. Eg ["host-public-key:ssh-rsa AAAAB...", "additional-ssh-options:-p 8022"].
      default: []
      type: array
    - name: additionalSSHKeygenOptions
      description: Additional options to pass to the ssh-keygen command.
      default: ""
      type: string
  results:
    - name: publicKeySecretName
      description: The name of a public key secret.
    - name: publicKeySecretNamespace
      description: The namespace of a public key secret.
    - name: privateKeySecretName
      description: The name of a private key secret.
    - name: privateKeySecretNamespace
      description: The namespace of a private key secret.
  steps:
    - name: generate-ssh-keys
      image: quay.io/kubevirt/tekton-task-generate-ssh-keys:v0.0.4
      command:
        - entrypoint
        - '--'
        - $(params.privateKeyConnectionOptions)
      env:
        - name: PUBLIC_KEY_SECRET_NAME
          value: $(params.publicKeySecretName)
        - name: PUBLIC_KEY_SECRET_NAMESPACE
          value: $(params.publicKeySecretNamespace)
        - name: PRIVATE_KEY_SECRET_NAME
          value: $(params.privateKeySecretName)
        - name: PRIVATE_KEY_SECRET_NAMESPACE
          value: $(params.privateKeySecretNamespace)
        - name: ADDITIONAL_SSH_KEYGEN_OPTIONS
          value: $(params.additionalSSHKeygenOptions)

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: generate-ssh-keys-task
rules:
  - verbs:
      - '*'
    apiGroups:
      - ''
    resources:
      - secrets

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: generate-ssh-keys-task

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: generate-ssh-keys-task
roleRef:
  kind: ClusterRole
  name: generate-ssh-keys-task
  apiGroup: rbac.authorization.k8s.io
subjects:
  - kind: ServiceAccount
    name: generate-ssh-keys-task
---
apiVersion: tekton.dev/v1beta1
kind: ClusterTask
metadata:
  annotations:
    task.kubevirt.io/associatedServiceAccount: modify-vm-template-task
    template.params.task.kubevirt.io/kind: Template
    template.params.task.kubevirt.io/apiVersion: template.openshift.io/v1
    templateNamespace.params.task.kubevirt.io/type: namespace
    cpus.params.task.kubevirt.io/type: number
    memory.params.task.kubevirt.io/type: memory
  labels:
    task.kubevirt.io/type: modify-vm-template
    task.kubevirt.io/category: modify-vm-template
  name: modify-vm-template
spec:
  params:
    - name: template
      description: Template to modify.
      type: string
    - name: templateNamespace
      description: Namespace of template. (defaults to active namespace)
      default: ""
      type: string
    - name: cpus
      description: Changes number of VM CPUs.
      default: ""
      type: string
    - name: memory
      description: Changes memory of the VM.
      default: ""
      type: string
    - name: providerName
      description: Specifies the name of the template provider.
      default: ""
      type: string
    - name: supportURL
      description: Specifies the support URL of the template.
      default: ""
      type: string
  steps:
    - name: modify-vm-template
      image: quay.io/kubevirt/tekton-task-modify-vm-template:v0.0.1
      command:
        - modify-vm-template
        - '--template-name'
        - $(params.template)
        - '--template-namespace'
        - $(params.templateNamespace)
        - '--cpus'
        - $(params.cpus)
        - '--memory'
        - $(params.memory)
        - '--provider-name'
        - $(params.providerName)
        - '--support-url'
        - $(params.supportURL)

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: modify-vm-template-task
rules:
  - verbs:
      - get
      - list
      - update
      - watch
    apiGroups:
      - template.openshift.io
    resources:
      - templates

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: modify-vm-template-task

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: modify-vm-template-task
roleRef:
  kind: ClusterRole
  name: modify-vm-template-task
  apiGroup: rbac.authorization.k8s.io
subjects:
  - kind: ServiceAccount
    name: modify-vm-template-task
---
apiVersion: tekton.dev/v1beta1
kind: ClusterTask
metadata:
  annotations:
    task.kubevirt.io/associatedServiceAccount: wait-for-vmi-status-task
    vmiNamespace.params.task.kubevirt.io/type: namespace
  labels:
    task.kubevirt.io/type: wait-for-vmi-status
    task.kubevirt.io/category: wait-for-vmi-status
  name: wait-for-vmi-status
spec:
  params:
    - name: vmiName
      description: Name of a VirtualMachineInstance to wait for.
      type: string
    - name: vmiNamespace
      description: Namespace of a VirtualMachineInstance to wait for. (defaults to manifest namespace or active namespace)
      default: ""
      type: string
    - name: successCondition
      default: ""
      description: A label selector expression to decide if the VirtualMachineInstance (VMI) is in a success state. Eg. "status.phase == Succeeded". It is evaluated on each VMI update and will result in this task succeeding if true.
    - name: failureCondition
      default: ""
      description: A label selector expression to decide if the VirtualMachineInstance (VMI) is in a failed state. Eg. "status.phase in (Failed, Unknown)". It is evaluated on each VMI update and will result in this task failing if true.
  steps:
    - name: wait-for-vmi-status
      image: quay.io/kubevirt/tekton-task-wait-for-vmi-status:v0.0.1
      command:
        - entrypoint
      env:
        - name: VMI_NAME
          value: $(params.vmiName)
        - name: VMI_NAMESPACE
          value: $(params.vmiNamespace)
        - name: SUCCESS_CONDITION
          value: $(params.successCondition)
        - name: FAILURE_CONDITION
          value: $(params.failureCondition)

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: wait-for-vmi-status-task
rules:
  - verbs:
      - get
      - list
      - watch
    apiGroups:
      - kubevirt.io
    resources:
      - virtualmachineinstances

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: wait-for-vmi-status-task

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: wait-for-vmi-status-task
roleRef:
  kind: ClusterRole
  name: wait-for-vmi-status-task
  apiGroup: rbac.authorization.k8s.io
subjects:
  - kind: ServiceAccount
    name: wait-for-vmi-status-task
